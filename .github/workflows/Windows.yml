---
name: Windows
'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  QT_VERSION: 6.3.1
jobs:
  build:
    name: ${{ matrix.os.name }} (${{ matrix.mode }})
    runs-on: ${{ matrix.os.value }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: Windows
            artifact: "Windows-x64"
            value: windows-latest
            triplet: x64-windows
        mode:
          - release
          - debug
          - asan
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install xmake
        uses: xmake-io/github-action-setup-xmake@v1

      - name: Update xmake
        shell: cmake -P {0}
        run: |
          execute_process(COMMAND xmake update -s github:xmake-io/xmake#test)
          
      - name: Download Qt
        id: qt
        shell: cmake -P {0}
        run: |
          set(qt_version "$ENV{QT_VERSION}")

          string(REGEX MATCH "^[0-9]+" qt_version_major "${qt_version}")
          string(REPLACE "." "" qt_version_dotless "${qt_version}")

          set(url_os "windows_x86")
          set(qt_package_arch_suffix "win64_msvc2019_64")
          set(qt_dir_prefix "${qt_version}/msvc2019_64")
          set(qt_package_suffix "-Windows-Windows_10_21H2-MSVC2019-Windows-Windows_10_21H2-X86_64")

          set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt${qt_version_major}_${qt_version_dotless}")
          file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)

          file(READ ./Updates.xml updates_xml)
          string(REGEX MATCH "<Name>qt.qt${qt_version_major}.*<Version>([0-9+-.]+)</Version>" updates_xml_output "${updates_xml}")
          set(qt_package_version ${CMAKE_MATCH_1})

          file(MAKE_DIRECTORY qt)

          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt/${qt_dir_prefix}" qt_dir)
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt" qt_base_dir)
          message("::set-output name=qt_dir::${qt_dir}")
          message("::set-output name=qt_base_dir::${qt_base_dir}")
          message("::set-output name=qt_dir_prefix::${qt_dir_prefix}")

          message("Downloading Qt to ${qt_dir}")
          function(downloadAndExtract url archive)
            message("Downloading ${url}")
            file(DOWNLOAD "${url}" ./${archive} SHOW_PROGRESS)
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${archive} WORKING_DIRECTORY ${qt_base_dir} RESULT_VARIABLE result)
            if (NOT result EQUAL 0)
              string(REGEX MATCH "FAILED:.*$" error_message "${output}")
              string(REPLACE "\n" "%0A" error_message "${error_message}")
              message("::error::${error_message}")
              message(FATAL_ERROR "Build failed")
            endif()
          endfunction()

          foreach(package qtbase qtdeclarative)
            downloadAndExtract(
              "${qt_base_url}/qt.qt${qt_version_major}.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
              ${package}.7z
            )
          endforeach()

          downloadAndExtract(
            "${qt_base_url}/qt.qt${qt_version_major}.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}d3dcompiler_47-x64.7z"
            d3dcompiler_47.7z
          )

          file(APPEND "$ENV{GITHUB_PATH}" "${qt_dir}/bin")

      - name: Configure & Build
        id: confandbuild
        shell: cmake -P {0}
        run: |
          execute_process(COMMAND xmake f -vD --yes -m ${{ matrix.mode }} --qt=qt --ccache=n RESULT_VARIABLE result)
          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()

          execute_process(COMMAND xmake b -vD RESULT_VARIABLE result)
          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()
          
      - name: Install
        id: install
        shell: cmake -P {0}
        run: |
          file(MAKE_DIRECTORY qtquick-controls2-winui3-theme-output)
          execute_process(COMMAND xmake install -vD --installdir=$ENV{GITHUB_WORKSPACE}/qtquick-controls2-winui3-theme-output RESULT_VARIABLE result)
          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()
          
      - name: Upload artifacts
        id: upload
        uses: actions/upload-artifact@v2
        with:
          name: QQC2-Windows11-Theme-${{ matrix.mode }}
          path: ./qtquick-controls2-winui3-theme-output
